#!/usr/bin/env node

import { execSync } from "node:child_process";
import fs from "node:fs";
import path from "node:path";
import { generateJsConfig } from "../tools/generateJsConfig.js";

const PATH_ALIASES = path.resolve("path-aliases.js");
const TIMESTAMP_FILE = path.resolve(".git/.aliases.timestamp");

console.log("üöÄ pre-commit hook started");

// Check if path-aliases.js was modified since last commit
function hasPathAliasesChanged() {
  if (!fs.existsSync(PATH_ALIASES)) return false;

  const currentMTime = fs.statSync(PATH_ALIASES).mtimeMs;

  if (!fs.existsSync(TIMESTAMP_FILE)) {
    fs.writeFileSync(TIMESTAMP_FILE, String(currentMTime));
    return true;
  }

  const previousMTime = parseFloat(fs.readFileSync(TIMESTAMP_FILE, "utf-8"));

  if (currentMTime !== previousMTime) {
    fs.writeFileSync(TIMESTAMP_FILE, String(currentMTime));
    return true;
  }

  return false;
}

try {
  // 2. Generate jsconfig.json if path-aliases.js was modified
  if (hasPathAliasesChanged()) {
    console.log("üîÑ path-aliases.js changed. Regenerating jsconfig.json...");
    generateJsConfig();
  } else {
    console.log(
      "‚ÑπÔ∏è path-aliases.js unchanged. Skipping jsconfig.json generation."
    );
  }
  // 3. Run formatter
  execSync("npm run format", { stdio: "inherit" });

  // 4. Run linter
  execSync("npm run lint", { stdio: "inherit" });

  // 5. Run tests
  execSync("npm run test", { stdio: "inherit" });

  console.log("‚úÖ pre-commit: formatting, linting, and tests passed");
} catch (error) {
  console.error("‚ùå pre-commit: check failed. Commit aborted.");
  process.exit(1);
}

// 6. Re-add all updated files (e.g. jsconfig.json)
execSync("git add .", { stdio: "inherit", shell: true });
